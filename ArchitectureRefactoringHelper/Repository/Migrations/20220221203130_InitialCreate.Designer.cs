// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(RefactoringApproachContext))]
    [Migration("20220221203130_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.1");

            modelBuilder.Entity("AnalysisTypeApproachProcess", b =>
                {
                    b.Property<string>("AnalysisTypesName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ApproachProcessesApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnalysisTypesName", "ApproachProcessesApproachProcessId");

                    b.HasIndex("ApproachProcessesApproachProcessId");

                    b.ToTable("JoinTable.Approach.Process.AnalysisType", (string)null);
                });

            modelBuilder.Entity("ApproachOutputRefactoringApproach", b =>
                {
                    b.Property<int>("ApproachOutputsApproachOutputId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RefactoringApproachesRefactoringApproachId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApproachOutputsApproachOutputId", "RefactoringApproachesRefactoringApproachId");

                    b.HasIndex("RefactoringApproachesRefactoringApproachId");

                    b.ToTable("JoinTable.Approach.Output", (string)null);
                });

            modelBuilder.Entity("ApproachProcessAutomationLevel", b =>
                {
                    b.Property<int>("ApproachProcessesApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AutomationLevelsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachProcessesApproachProcessId", "AutomationLevelsName");

                    b.HasIndex("AutomationLevelsName");

                    b.ToTable("JoinTable.Approach.Process.AutomationLevel", (string)null);
                });

            modelBuilder.Entity("ApproachProcessDirection", b =>
                {
                    b.Property<int>("ApproachProcessesApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DirectionsName")
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachProcessesApproachProcessId", "DirectionsName");

                    b.HasIndex("DirectionsName");

                    b.ToTable("JoinTable.Approach.Process.Direction", (string)null);
                });

            modelBuilder.Entity("ApproachProcessQuality", b =>
                {
                    b.Property<int>("ApproachProcessesApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QualitiesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachProcessesApproachProcessId", "QualitiesName");

                    b.HasIndex("QualitiesName");

                    b.ToTable("JoinTable.Approach.Process.Quality", (string)null);
                });

            modelBuilder.Entity("ApproachProcessTechnique", b =>
                {
                    b.Property<int>("ApproachProcessesApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TechniquesName")
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachProcessesApproachProcessId", "TechniquesName");

                    b.HasIndex("TechniquesName");

                    b.ToTable("JoinTable.Approach.Process.Technique", (string)null);
                });

            modelBuilder.Entity("DomainArtifactInputRefactoringApproach", b =>
                {
                    b.Property<string>("DomainArtifactInputsName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RefactoringApproachesRefactoringApproachId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DomainArtifactInputsName", "RefactoringApproachesRefactoringApproachId");

                    b.HasIndex("RefactoringApproachesRefactoringApproachId");

                    b.ToTable("JoinTable.Approach.Input.DomainArtifact", (string)null);
                });

            modelBuilder.Entity("ExecutableInputRefactoringApproach", b =>
                {
                    b.Property<int>("RefactoringApproachesRefactoringApproachId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExecutableInputsName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExecutableInputsLanguage")
                        .HasColumnType("TEXT");

                    b.HasKey("RefactoringApproachesRefactoringApproachId", "ExecutableInputsName", "ExecutableInputsLanguage");

                    b.HasIndex("ExecutableInputsName", "ExecutableInputsLanguage");

                    b.ToTable("JoinTable.Approach.Input.Executable", (string)null);
                });

            modelBuilder.Entity("ModelArtifactInputRefactoringApproach", b =>
                {
                    b.Property<string>("ModelArtifactInputsName")
                        .HasColumnType("TEXT");

                    b.Property<int>("RefactoringApproachesRefactoringApproachId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ModelArtifactInputsName", "RefactoringApproachesRefactoringApproachId");

                    b.HasIndex("RefactoringApproachesRefactoringApproachId");

                    b.ToTable("JoinTable.Approach.Input.ModelArtifact", (string)null);
                });

            modelBuilder.Entity("RefactoringApproachRuntimeArtifactInput", b =>
                {
                    b.Property<int>("RefactoringApproachesRefactoringApproachId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RuntimeArtifactInputsName")
                        .HasColumnType("TEXT");

                    b.HasKey("RefactoringApproachesRefactoringApproachId", "RuntimeArtifactInputsName");

                    b.HasIndex("RuntimeArtifactInputsName");

                    b.ToTable("JoinTable.Approach.Input.RuntimeArtifact", (string)null);
                });

            modelBuilder.Entity("Repository.Models.AccuracyPrecision", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Usability.AccuracyPrecision", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "High",
                            Description = ""
                        },
                        new
                        {
                            Name = "Medium",
                            Description = ""
                        },
                        new
                        {
                            Name = "Low",
                            Description = ""
                        },
                        new
                        {
                            Name = "Not available",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.AnalysisType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Process.AnalysisType", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Static",
                            Description = ""
                        },
                        new
                        {
                            Name = "Dynamic",
                            Description = ""
                        },
                        new
                        {
                            Name = "Lexical",
                            Description = ""
                        },
                        new
                        {
                            Name = "Historic",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ApproachOutput", b =>
                {
                    b.Property<int>("ApproachOutputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchitectureName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachOutputId");

                    b.HasIndex("ArchitectureName");

                    b.HasIndex("ServiceTypeName");

                    b.ToTable("Approach.Output");
                });

            modelBuilder.Entity("Repository.Models.ApproachProcess", b =>
                {
                    b.Property<int>("ApproachProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("ApproachProcessId");

                    b.ToTable("Approach.Process");
                });

            modelBuilder.Entity("Repository.Models.ApproachSource", b =>
                {
                    b.Property<int>("ApproachSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApproachSourceId");

                    b.ToTable("Approach.Source");
                });

            modelBuilder.Entity("Repository.Models.ApproachUsability", b =>
                {
                    b.Property<int>("ApproachUsabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccuracyPrecisionName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResultsQualitiyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToolSupportName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidationMethodName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ApproachUsabilityId");

                    b.HasIndex("AccuracyPrecisionName");

                    b.HasIndex("ResultsQualitiyName");

                    b.HasIndex("ToolSupportName");

                    b.HasIndex("ValidationMethodName");

                    b.ToTable("Approach.Usability");
                });

            modelBuilder.Entity("Repository.Models.Architecture", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Output.Architecture", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Microservices",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.AutomationLevel", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Process.AutomationLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Automatic",
                            Description = ""
                        },
                        new
                        {
                            Name = "Semi-automatic",
                            Description = ""
                        },
                        new
                        {
                            Name = "Manual",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.Direction", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Process.Direction", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Bottom-up",
                            Description = ""
                        },
                        new
                        {
                            Name = "Top-down",
                            Description = ""
                        },
                        new
                        {
                            Name = "Mixed",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.DomainArtifactInput", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Input.DomainArtifact", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Ontology",
                            Description = ""
                        },
                        new
                        {
                            Name = "Human expertise",
                            Description = ""
                        },
                        new
                        {
                            Name = "Documentation",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ExecutableInput", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name", "Language");

                    b.ToTable("Approach.Input.Executable", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Source code",
                            Language = "No specification",
                            Description = ""
                        },
                        new
                        {
                            Name = "Database file",
                            Language = "No specification",
                            Description = ""
                        },
                        new
                        {
                            Name = "Test cases",
                            Language = "No specification",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ModelArtifactInput", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Input.ModelArtifact", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Business process model",
                            Description = ""
                        },
                        new
                        {
                            Name = "Use case model",
                            Description = ""
                        },
                        new
                        {
                            Name = "Activity diagram",
                            Description = ""
                        },
                        new
                        {
                            Name = "Data flow diagram",
                            Description = ""
                        },
                        new
                        {
                            Name = "State machine diagram",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.Quality", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Process.Quality", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Reuse",
                            Category = "Requirement",
                            Description = ""
                        },
                        new
                        {
                            Name = "Maintainability",
                            Category = "Requirement",
                            Description = ""
                        },
                        new
                        {
                            Name = "Interoperability",
                            Category = "Requirement",
                            Description = ""
                        },
                        new
                        {
                            Name = "Self-containment",
                            Category = "Requirement",
                            Description = ""
                        },
                        new
                        {
                            Name = "Composability",
                            Category = "Requirement",
                            Description = ""
                        },
                        new
                        {
                            Name = "Coupling",
                            Category = "Metric",
                            Description = ""
                        },
                        new
                        {
                            Name = "Cohesion",
                            Category = "Metric",
                            Description = ""
                        },
                        new
                        {
                            Name = "Granularity",
                            Category = "Metric",
                            Description = ""
                        },
                        new
                        {
                            Name = "Number of services",
                            Category = "Metric",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.RefactoringApproach", b =>
                {
                    b.Property<int>("RefactoringApproachId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApproachProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApproachSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ApproachUsabilityId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RefactoringApproachId");

                    b.HasIndex("ApproachProcessId")
                        .IsUnique();

                    b.HasIndex("ApproachSourceId")
                        .IsUnique();

                    b.HasIndex("ApproachUsabilityId")
                        .IsUnique();

                    b.ToTable("Approaches");
                });

            modelBuilder.Entity("Repository.Models.ResultsQuality", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Usability.ResultsQuality", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "High",
                            Description = ""
                        },
                        new
                        {
                            Name = "Medium",
                            Description = ""
                        },
                        new
                        {
                            Name = "Low",
                            Description = ""
                        },
                        new
                        {
                            Name = "Not available",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.RuntimeArtifactInput", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Input.RuntimeArtifact", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Log traces",
                            Description = ""
                        },
                        new
                        {
                            Name = "User-Application interactions",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ServiceType", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Output.ServiceType", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Business services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Enterprise services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Application services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Entity services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Utility services",
                            Description = ""
                        },
                        new
                        {
                            Name = "Infrastructure services",
                            Description = ""
                        },
                        new
                        {
                            Name = "No specification",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.Technique", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Process.Technique", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Wrapping",
                            Description = ""
                        },
                        new
                        {
                            Name = "Genetic algorithm",
                            Description = ""
                        },
                        new
                        {
                            Name = "Formal concept analysis",
                            Description = ""
                        },
                        new
                        {
                            Name = "Clustering",
                            Description = ""
                        },
                        new
                        {
                            Name = "Custom heuristics",
                            Description = ""
                        },
                        new
                        {
                            Name = "General guidelines",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ToolSupport", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Usability.ToolSupport", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Industry ready",
                            Description = ""
                        },
                        new
                        {
                            Name = "Open source",
                            Description = ""
                        },
                        new
                        {
                            Name = "Prototype",
                            Description = ""
                        },
                        new
                        {
                            Name = "No tool support",
                            Description = ""
                        });
                });

            modelBuilder.Entity("Repository.Models.ValidationMethod", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Approach.Usability.ValidationMethod", (string)null);

                    b.HasData(
                        new
                        {
                            Name = "Experiment",
                            Description = ""
                        },
                        new
                        {
                            Name = "Industry",
                            Description = ""
                        },
                        new
                        {
                            Name = "Case study",
                            Description = ""
                        },
                        new
                        {
                            Name = "No validation",
                            Description = ""
                        });
                });

            modelBuilder.Entity("AnalysisTypeApproachProcess", b =>
                {
                    b.HasOne("Repository.Models.AnalysisType", null)
                        .WithMany()
                        .HasForeignKey("AnalysisTypesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ApproachProcess", null)
                        .WithMany()
                        .HasForeignKey("ApproachProcessesApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApproachOutputRefactoringApproach", b =>
                {
                    b.HasOne("Repository.Models.ApproachOutput", null)
                        .WithMany()
                        .HasForeignKey("ApproachOutputsApproachOutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.RefactoringApproach", null)
                        .WithMany()
                        .HasForeignKey("RefactoringApproachesRefactoringApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApproachProcessAutomationLevel", b =>
                {
                    b.HasOne("Repository.Models.ApproachProcess", null)
                        .WithMany()
                        .HasForeignKey("ApproachProcessesApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.AutomationLevel", null)
                        .WithMany()
                        .HasForeignKey("AutomationLevelsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApproachProcessDirection", b =>
                {
                    b.HasOne("Repository.Models.ApproachProcess", null)
                        .WithMany()
                        .HasForeignKey("ApproachProcessesApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Direction", null)
                        .WithMany()
                        .HasForeignKey("DirectionsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApproachProcessQuality", b =>
                {
                    b.HasOne("Repository.Models.ApproachProcess", null)
                        .WithMany()
                        .HasForeignKey("ApproachProcessesApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Quality", null)
                        .WithMany()
                        .HasForeignKey("QualitiesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApproachProcessTechnique", b =>
                {
                    b.HasOne("Repository.Models.ApproachProcess", null)
                        .WithMany()
                        .HasForeignKey("ApproachProcessesApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Technique", null)
                        .WithMany()
                        .HasForeignKey("TechniquesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainArtifactInputRefactoringApproach", b =>
                {
                    b.HasOne("Repository.Models.DomainArtifactInput", null)
                        .WithMany()
                        .HasForeignKey("DomainArtifactInputsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.RefactoringApproach", null)
                        .WithMany()
                        .HasForeignKey("RefactoringApproachesRefactoringApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExecutableInputRefactoringApproach", b =>
                {
                    b.HasOne("Repository.Models.RefactoringApproach", null)
                        .WithMany()
                        .HasForeignKey("RefactoringApproachesRefactoringApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ExecutableInput", null)
                        .WithMany()
                        .HasForeignKey("ExecutableInputsName", "ExecutableInputsLanguage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelArtifactInputRefactoringApproach", b =>
                {
                    b.HasOne("Repository.Models.ModelArtifactInput", null)
                        .WithMany()
                        .HasForeignKey("ModelArtifactInputsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.RefactoringApproach", null)
                        .WithMany()
                        .HasForeignKey("RefactoringApproachesRefactoringApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RefactoringApproachRuntimeArtifactInput", b =>
                {
                    b.HasOne("Repository.Models.RefactoringApproach", null)
                        .WithMany()
                        .HasForeignKey("RefactoringApproachesRefactoringApproachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.RuntimeArtifactInput", null)
                        .WithMany()
                        .HasForeignKey("RuntimeArtifactInputsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repository.Models.ApproachOutput", b =>
                {
                    b.HasOne("Repository.Models.Architecture", "Architecture")
                        .WithMany("ApproachOutputs")
                        .HasForeignKey("ArchitectureName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ServiceType", "ServiceType")
                        .WithMany("ApproachOutputs")
                        .HasForeignKey("ServiceTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Architecture");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Repository.Models.ApproachUsability", b =>
                {
                    b.HasOne("Repository.Models.AccuracyPrecision", "AccuracyPrecision")
                        .WithMany("ApproachUsabilities")
                        .HasForeignKey("AccuracyPrecisionName");

                    b.HasOne("Repository.Models.ResultsQuality", "ResultsQualitiy")
                        .WithMany("ApproachUsabilities")
                        .HasForeignKey("ResultsQualitiyName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ToolSupport", "ToolSupport")
                        .WithMany("ApproachUsabilities")
                        .HasForeignKey("ToolSupportName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ValidationMethod", "ValidationMethod")
                        .WithMany("ApproachUsabilities")
                        .HasForeignKey("ValidationMethodName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccuracyPrecision");

                    b.Navigation("ResultsQualitiy");

                    b.Navigation("ToolSupport");

                    b.Navigation("ValidationMethod");
                });

            modelBuilder.Entity("Repository.Models.RefactoringApproach", b =>
                {
                    b.HasOne("Repository.Models.ApproachProcess", "ApproachProcess")
                        .WithOne("RefactoringApproach")
                        .HasForeignKey("Repository.Models.RefactoringApproach", "ApproachProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ApproachSource", "ApproachSource")
                        .WithOne("RefactoringApproach")
                        .HasForeignKey("Repository.Models.RefactoringApproach", "ApproachSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.ApproachUsability", "ApproachUsabilitiy")
                        .WithOne("RefactoringApproach")
                        .HasForeignKey("Repository.Models.RefactoringApproach", "ApproachUsabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproachProcess");

                    b.Navigation("ApproachSource");

                    b.Navigation("ApproachUsabilitiy");
                });

            modelBuilder.Entity("Repository.Models.AccuracyPrecision", b =>
                {
                    b.Navigation("ApproachUsabilities");
                });

            modelBuilder.Entity("Repository.Models.ApproachProcess", b =>
                {
                    b.Navigation("RefactoringApproach");
                });

            modelBuilder.Entity("Repository.Models.ApproachSource", b =>
                {
                    b.Navigation("RefactoringApproach");
                });

            modelBuilder.Entity("Repository.Models.ApproachUsability", b =>
                {
                    b.Navigation("RefactoringApproach");
                });

            modelBuilder.Entity("Repository.Models.Architecture", b =>
                {
                    b.Navigation("ApproachOutputs");
                });

            modelBuilder.Entity("Repository.Models.ResultsQuality", b =>
                {
                    b.Navigation("ApproachUsabilities");
                });

            modelBuilder.Entity("Repository.Models.ServiceType", b =>
                {
                    b.Navigation("ApproachOutputs");
                });

            modelBuilder.Entity("Repository.Models.ToolSupport", b =>
                {
                    b.Navigation("ApproachUsabilities");
                });

            modelBuilder.Entity("Repository.Models.ValidationMethod", b =>
                {
                    b.Navigation("ApproachUsabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
